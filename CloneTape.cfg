#####################TIME VAR##############################################
YD=$(date --date yesterday +%Y%m%d)
TD=$(date +%Y%m%d)
TDd=$(date '+%x %X')
TDl=$(date +%d%m%y%H%M%S)
LD=$(date +%Y%m%d_%X)
LMD=$(date -d "$(date +%Y-%m-01) -1 day" +%m/%d/%Y) 
FMD=$(date -d "$(date +%Y-%m-01)" +%m/%d/%Y) 
SMD=$(date -d "$(date +%Y-%m-01) +1 day" +%m/%d/%Y)
RTT=$(date -d "$(date +%Y-%m-01) +2 years" +"%m/%d/%Y 23:59:59")
PM=$(LC_ALL=pl_PL.utf8 date -d "$(date +%Y-%m-01) -1 month" +%B--%Y) 
SSCR1="sscreate>$LMD 18:00,sscreate<$FMD 18:00"
SSCR2="sscreate>$LMD 06:00,sscreate<$FMD 08:00"
SSCR3="sscreate>$FMD 00:00,sscreate<$SMD 00:00"
SSCR4="sscreate>$LMD 03:00,sscreate<$FMD 03:00"
SSCR5="sscreate>$LMD 00:00,sscreate<$FMD 23:59"
TM01a=$(echo "$SSCR1" | cut -c 10-25)
TM01b=$(echo "$SSCR1" | cut -c 36-51)
TM01c="$TM01a - $TM01b"
TM02a=$(echo "$SSCR2" | cut -c 10-25)
TM02b=$(echo "$SSCR2" | cut -c 36-51)
TM02c="$TM02a - $TM02b"
TM03a=$(echo "$SSCR3" | cut -c 10-25)
TM03b=$(echo "$SSCR3" | cut -c 36-51)
TM03c="$TM03a - $TM03b"
TM04a=$(echo "$SSCR4" | cut -c 10-25)
TM04b=$(echo "$SSCR4" | cut -c 36-51)
TM04c="$TM04a - $TM04b"
TM05a=$(echo "$SSCR5" | cut -c 10-25)
TM05b=$(echo "$SSCR5" | cut -c 36-51)
TM05c="$TM05a - $TM05b"
#test
SSCR6="sscreate>05/01/25 00:00,sscreate<05/01/25 18:00"
TM06a=$(echo "$SSCR6" | cut -c 10-23)
TM06b=$(echo "$SSCR6" | cut -c 34-51)
TM06c=$(echo "$TM06a" - "$TM06b")


#####################SCRIPTS VAR##############################################

#glowne zmienne
SCNAME=$0
env=$1
line1="=================================================================================================================="
line2="------------------------------------------------------------------------------------------------------------------"
WORKDIR="/nsr/scripts/CloneTape"
SYSDIR="${WORKDIR}/sys"
LOGDIR="${SYSDIR}/CTlogs"
LOGNAME="${LOGDIR}/CloneTape_${env}.log"
APPL1="/usr/sbin/mminfo"
APPL2="/usr/sbin/nsrclone"
serv="nw1.pekao-fs.com.pl"
SSN="nw1.pekao-fs.com.pl"
DSN="sn1-pco.pekao-fs.com.pl"
LOCK="${SYSDIR}/CloneTape_${env}.lock"
SSFILE="${SYSDIR}/${env}_ssid.txt"
POLICY="ActiveDirectory"
DLOG="/nsr/logs/daemon.log"
SERVER="nw1.pekao-fs.com.pl"
MAILADRR="andrzej.ostrowski@pekao-fs.com.pl,damian.parafinski@pekao-fs.com.pl"
SUBJECT="Klonowanie backupow miesiecznych $env zakonczone"
HTML_FILE="log.html"
ATTACH="$html_file"
BODY="Log z klonowania $env."

#zmienne biblioteki tasmowej
LIBRARY_NAME="rd=sn1-pco.pekao-fs.com.pl:IBM@21.0.1"

#zmienne obslugi blokady
working_dir="${WORKDIR}"
lock_dir="${SYSDIR}"
lock_file="${LOCK}"
cmd_locking="touch  ${LOCK}"
cmd_check_lock="test -f ${LOCK}"
cmd_unlocking="rm -f ${lock_file}"
cmd_rm="rm -f"
cmd_mv="mv"

#zmienne obslugi logu
log_dir="${LOGDIR}"
log_lile="${LOGNAME}"
cmd_check_log="test -f ${LOGNAME}"
cmd_logging="touch ${LOGNAME}"
end_announ="${TDd} Skrypt zostal przerwany przez operatora. Usuwam plik blokady i koncze."
end_comm="echo \"$end_announ\"; $cmd_unlocking; exit 1"

##############NW VAR#########################################################

#echo $1
case $1 in
        'AD')
	env="ActiveDirectory"
	PARAM="action=ActiveDirectoryDB_CloneMonthly,action=ActiveDirectoryFS_CloneMonthly"
	RANGE=$TM01c
	CR=$SSCR1
 	;;
        'AIX_DB')
        env="AIX_DB"
        PARAM="workflow=AIX_EME_ALZDB,workflow=AIX_EME_DELTADB,workflow=AIX_EME_KAPPADB,workflow=AIX_EME_MERKURYDB,workflow=AIX_EME_ORIONDB,workflow=AIX_EME_PEODFEDB,workflow=AIX_EME_ZUPHUBDB,workflow=AIX_INV_ATHENADB,workflow=AIX_INV_FIZDB,workflow=AIX_INV_GOLDB,workflow=AIX_INV_MARSDB,workflow=AIX_INV_NEPTUNDB,workflow=AIX_INV_TPSADB,workflow=AIX_UBEZP_CERESDB,workflow=AIX_UBEZP_URANDB,workflow=AIX_INV_TYTANDB"
	RANGE=$TM02c
	CR=$SSCR2
        ;;
        'AIX_FS')
        env="AIX_FS"
        PARAM="action=AIX_EME_TESTY_CloneMonthly,action=AIX_EME_TESTY_SYS_CloneMonthly,action=AIX_INV_TESTY_SYS_CloneMonthly,action=AIX_INV_TESTY_CloneMonthly,action=AIX_NIM_SYS_CloneMonthly,action=AIX_INV_SYS_CloneMonthly,action=AIX_EME_SYS_CloneMonthly,action=AIX_UBEZP_SYS_CloneMonthly,action=AIX_EME_PLIKI_CloneMonthly,action=AIX_INV_PLIKI_CloneMonthly,action=AIX_UBEZP_PLIKI_CloneMonthly"
	RANGE=$TM03c
	CR=$SSCR3
        ;;
        'EXCH')
        env="EXCHANGE"
        PARAM="action=Exchange_DB_dag2019_CloneMonthly,action=Exchange_fs_new_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'FAX')
        env="FAXYS"
        PARAM="action=Facsys_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'SQL')
        env="SQL"
        PARAM="action=sql_db_CloneMonthly,action=sql_fs_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'SHRP')
        env="SHAREPOINT"
        PARAM="action=SharePoint_db_CloneMonthly,action=SharePoint_fs_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'Oracle')
        env="Oracle"
        PARAM="workflow=Oracle_acfs_chip-dale_monthly,workflow=Oracle_acfs_chip19-dale19_monthly,workflow=Oracle_acfs_figo-fago_monthly,workflow=Oracle_acfs_figo19-fago19_monthly,workflow=Oracle_acfs_orasatofe_monthly,workflow=Oracle_acfs_orasofi_monthly,workflow=Oracle_acfs_racpco-raczco_monthly,workflow=Oracle_acfs_satofetest_monthly,workflow=Oracle_db_AMFSOFI_monthly,workflow=Oracle_db_AMTFGOL_monthly,workflow=Oracle_db_AMTFLEG_monthly,workflow=Oracle_db_AMTFPIO_monthly,workflow=Oracle_db_AMTFPZU_monthly,workflow=Oracle_db_ESOFECDB_monthly,workflow=Oracle_db_ESOFEDBX_monthly,workflow=Oracle_db_FOLCDB_monthly,workflow=Oracle_db_FOLDEMOX_monthly,workflow=Oracle_db_FOLTESTX_monthly,workflow=Oracle_db_FOLTESTXCDB_monthly,workflow=Oracle_db_ORARCU_monthly,workflow=Oracle_db_PFS_monthly,workflow=Oracle_db_PFS_arch_monthly,workflow=Oracle_db_PFSTST_monthly,workflow=Oracle_db_SATOFEDB_monthly,workflow=Oracle_db_SATOFEDB_arch_monthly,workflow=Oracle_db_SKANDB_monthly,workflow=Oracle_db_SOFI_IKE1_monthly,workflow=Oracle_db_SOFI_IKE1_arch_monthly,workflow=Oracle_db_SOFI_ORARCU_monthly,workflow=Oracle_db_SOFI_TFI1_monthly,workflow=Oracle_db_SOFI_TFI1_arch_monthly,workflow=Oracle_db_SOFI_UL3VIP1_monthly,workflow=Oracle_db_SOFI_UL3VIP1_arch_monthly,workflow=Oracle_db_UFKCDB_monthly,workflow=Oracle_db_UFKDB_monthly,workflow=Oracle_db_UFOCDB_monthly,workflow=Oracle_db_UFODBX_monthly,workflow=Oracle_fs_chip_dale_monthly,workflow=Oracle_fs_chip19_dale19_monthly,workflow=Oracle_fs_figo_fago_monthly,workflow=Oracle_fs_figo19_fago19_monthly,workflow=Oracle_fs_nodepco_nodezco_monthly,workflow=Oracle_fs_orafa1_orafa2_monthly,workflow=Oracle_fs_orasatofe1_orasatofe2_monthly,workflow=Oracle_fs_orasofi1_orasofi2_monthly,workflow=Oracle_fs_pwlproxy_monthly,workflow=Oracle_fs_pwlsatofe_monthly,workflow=Oracle_fs_pwlsofi_monthly,workflow=Oracle_fs_racpco_raczco_monthly,workflow=Oracle_fs_satofetest1_satofetest2_monthly,workflow=Oracle_fs_skanpco_skanzco_monthly"
        RANGE=$TM05c
        CR=$SSCR5
        ;;
        'VS')
        env="VmwareServers"
        PARAM="action=DDVMwareClonePCO_2Years,vmname=PZUDANE,vmname=Orion,vmname=TELBAZA,vmname=Fontel,vmname=viewer_prod,vmname=Exchange01,vmname=Exchange02"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'VW')
        env="VmwareWitness"
        PARAM="workflow=VMware_witness,action=DDVMwareClonePCO_2Years"
        RANGE=$TM01c
        CR=$SSCR1	
        ;;
        'WD')
        env="WIN_DATA"
        PARAM="action=WIN_DATA_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'WS')
        env="WIN_SYS"
        PARAM="action=WIN_SYS_CloneMonthly"
        RANGE=$TM01c
        CR=$SSCR1
        ;;
        'SB')
        env="SERVER_BACKUP"
        PARAM="action=NMC server CloneMonthly,action=NVE server CloneMonthly,action=Server db CloneMonthly,action=SKLM_CloneMonthly,action=WIN_StorageNodes_fs_CloneMonthly"
        RANGE=$TM04c
        CR=$SSCR4
        ;;
        *)
           echo "Zla opcja $1"
           echo "Uses: CloneTape.sh [AD|ADB|AFS|EXCH|FAX|SQL|SHRP|Oracle|VS|VW|WD|WS|SB]"
           exit -1
           ;;
esac

##############FUNCTIONS######################################################
# Funkcja do sprawdzania, czy log istnieje
is_logfile() {
    
    echo "${TDd} Sprawdzam, czy istnieje plik logu..." | tee -a "${LOGNAME}"
    if [ -e "${LOGNAME}" ]; then
    echo "Istnieje plik logu "${LOGNAME}", kontynuuje." | tee -a "${LOGNAME}"
    else 
    echo "Brak pliku logu, tworze nowy plik logu "${LOGNAME}"." | tee -a "${LOGNAME}"
    ${cmd_logging}
    fi
}

# Funkcja do sprawdzania, czy blokada istnieje
is_already_running() {
    local check_lock_cmd=$1
    echo "${TDd} Sprawdzam, czy istnieje plik blokady..." | tee -a "${LOGNAME}"
    if ${check_lock_cmd}; then
        return 0
    else
        return 1
    fi
}

# Funkcja do tworzenia blokady
create_lock() {
    local lock_cmd=$1
    echo "${TDd} Brak pliku blokady, tworze nowy plik blokady:"| tee -a "${LOGNAME}"
    echo "${LOCK}" | tee -a "${LOGNAME}"
    echo "" | tee -a "${LOGNAME}"
    ${lock_cmd}
}

# Funkcja do usuwania blokady
remove_lock() {
    local unlock_cmd=$1
    echo "" | tee -a $LOGNAME
    echo "${TDd} Uzyto Ctrl+C, koncze i usuwam plik blokady." | tee -a $LOGNAME
    ${cmd_unlocking} || {
    echo "${TDd} Nie moÅ¼na usuac pliku blokady. Koncze" | tee -a $LOGNAME
        exit 3
    }
    $unlock_cmd
    echo "${TDd} Plik blokady zostal usuniety." | tee -a $LOGNAME
    exit 0
}


#Uniwersalna funkcja pytajaca
ask () {
echo "Czy chcesz kontynuowac? y/n"

while true; do
read znak
case $znak in
    y|Y)
        echo "Idziemy dalej"
        break
        ;;
    n|N)
        "$1"
        ;;
    *)
        echo "Niepoprawna odpowiedz. Wybierz y lub n."
        ;;
esac
done
}

#Funkcja ponownego wyboru
retry_check() {
    local func_to_call="$1"
    echo "Czy chcesz zakonczyc (1) czy wrocic do wyboru (2)?"
    read choice
    case $choice in
        1)
            echo "${TDd} Skrypt zostal przerwany przez operatora" | tee -a "${LOGNAME}"
            exit 0
            ;;
        2)
            $func_to_call
            ;;
        *)
            echo "Niepoprawna odpowiedz. Wybiez 1 lub 2."
            retry_check "$func_to_call"
            ;;
    esac
}

mm1 () {
max=0
for i in {1..5}; do
    var="$1$i[@]"
    values=("${!var}")
    if [ ${#values[@]} -gt $max ]; then
        max=${#values[@]}
    fi
done
}

#Funkcja formatowania tabeli
mm2 ()
{
echo "-------------------------------------------------------------------" | tee -a "${LOGNAME}"

printf "|  %-4s | %-6s | %-10s | %-10s | %-6s |\n" SS TB create retent level | tee -a "${LOGNAME}"
printf "|  %-4s | %-6s | %-10s | %-10s | %-6s |\n" ---- ------ ---------- ---------- ------ | tee -a "${LOGNAME}"
}

# Funkcja wyboru puli
choose_pool() {
    echo "Wybor puli tasmowej i retencji klonow" | tee -a "${LOGNAME}"
    echo "Wybierz pule tasmowa:"
    echo "PCO01: 1"
    echo "PCO02: 2"

    while true; do
        # Wczytanie odpowiedzi uÅ¼ytkownika
        read -r -p "Podaj numer (1 lub 2): " znak
        case "$znak" in
            1)
                POOL="TS4300 PCO 01"
                break
                ;;
            2)
                POOL="TS4300 PCO 02"
                break
                ;;
            *)
                echo "Niepoprawna odpowiedz. Wybierz 1 lub 2."
                ;;
        esac
    done

    echo "" | tee -a "${LOGNAME}"
    echo "Wybrana pula: $POOL" | tee -a "${LOGNAME}"
    echo "" | tee -a "${LOGNAME}"
}

# Funkcja do sprawdzania duplikatÃ³w SSID w puli tsmowe
check_ssid_dupl() {
    local pool=$1
    local ssid_file=$2

    # 1. Sprawdzanie, czy plik z SSID istnieje
    if [[ ! -f "$ssid_file" ]]; then
 	echo "" | tee -a "${LOGNAME}"
        echo "Plik $ssid_file nie istnieje. Upewnij sie, Å¼e plik z lita SSID jest dostepny." | tee -a "${LOGNAME}"
	# Wywolanie funkcji ponownego wyboru
        retry_check "check_ssid_dupl"
    fi

    # 2. Pobranie listy zapisanych savesetÃ³w w puli
    local saved_ssids=$(mminfo -q "pool=$pool" -r "ssid")

    # 3. Sprawdzanie duplikatow
    echo "Sprawdzanie savesetow $env w puli $POOL" | tee -a "${LOGNAME}"
    local duplicate_ssids=()
    while read -r ssid; do
        if echo "$saved_ssids" | grep -q -F "$ssid"; then
            duplicate_ssids+=("$ssid")
        fi
    done < "$ssid_file"

    # 4. Jesli znaleziono duplikaty, wyswietl je i zakoncz dzialanie skryptu
    if [[ ${#duplicate_ssids[@]} -gt 0 ]]; then
        echo "W puli ${pool} znalezlem wczesniej zapisane savesety ${env}:" | tee -a "${LOGNAME}"
        printf "%s\n" "${duplicate_ssids[@]}"
        echo "" | tee -a "${LOGNAME}"
        echo "${TDd} Koncze i usuwam plik blokady." | tee -a "${LOGNAME}"
        ${cmd_unlocking}
        exit 1
    fi
        echo "W puli ${pool} nie znalazlem savesetÃ³w ${env} przeznaczonych do klonowania, mozna kontynuowac." | tee -a "${LOGNAME}"
}

# Funkcja sprawdzania puli
check_pool() {
    echo "" | tee -a "${LOGNAME}"
    echo "${TDd} Sprawdzanie statusow dla puli: $POOL" | tee -a "${LOGNAME}"
    
    # Przypisanie odpowiedniego napedu tasmowego na podstawie wartosci zmiennej POOL
    if [[ "$POOL" == "TS4300 PCO 01" ]]; then
 	LIBRARY="rd=sn1-pco.pekao-fs.com.pl:IBM@21.0.1"
        DRIVE="Tape4801101"
	sleep 2
        dstat=$(timeout 5 nsrjb -C -j rd=sn1-pco.pekao-fs.com.pl:IBM@21.0.1 | grep Tape4801101)
    elif [[ "$POOL" == "TS4300 PCO 02" ]]; then
	LIBRARY="rd=sn1-pco.pekao-fs.com.pl:IBM@21.0.1"
        DRIVE="Tape4801102"
	sleep 2
        dstat=$(timeout 5 nsrjb -C -j rd=sn1-pco.pekao-fs.com.pl:IBM@21.0.1 | grep Tape4801102)
    else
	echo "" | tee -a "${LOGNAME}"
        echo "Niepoprawna wartosc zmiennej POOL" | tee -a "${LOGNAME}"
	echo "${TDd} Koncze i usuwam plik blokady." | tee -a "${LOGNAME}"
        ${cmd_unlocking}
        exit 1
    fi

    # Warunek sprawdzajacy statusy
    if [[ $dstat != *"mounted"* ]]; then
        echo "${TDd} Naped $DRIVE jest wolny, mozna kontnuowac klonowanie do puli $POOL" | tee -a "${LOGNAME}"
	echo "" | tee -a "${LOGNAME}"
    else
#	echo "$dstat" | tee -a "${LOGNAME}"
        echo "${TDd} Naped $DRIVE jest zajety!!!!!!" | tee -a "${LOGNAME}"
	echo "" | tee -a "${LOGNAME}"
        # Wywolanie funkcji ponownego wyboru
        retry_check "check_and_execute"
    fi
}

# Funkcja do przygotowania pierwszej tasmy do zapisu
prep_tape_1 () {
    local library=$1
    local pool=$2
    # 1. StwÃ³rz liste tasm w bibliotece
     local tape_list=$(mminfo -a -r 'volume,%used,pool,location' -q "!full,location=${library},pool=${pool}" | awk '{print $1}' | tail -n +2)
    # Sprawdzenie, czy lista tasm nie jest pusta
    if [[ -z "$tape_list" ]]; then
        echo "Blad: Nie znaleziono tasm w bibliotece ${library} i puli ${pool}." | tee -a "${LOGNAME}"
	echo "${TDd} Koncze i usuwam plik blokady." | tee -a "${LOGNAME}"
        ${cmd_unlocking}
        exit 1
    fi
    # 2. ZnajdÅº tasme o najnizszym unmerze
    local tape_to_write=$(echo "$tape_list" | sort -n | head -n 1)
    # Sprawdzenie, czy lista tasm nie jest pusta
    if [[ -z "$tape_list" ]]; then
        echo "Blad: Nie znaleziono tasm w bibliotece ${library} i puli ${pool}." | tee -a "${LOGNAME}"
	echo "${TDd} Koncze i usuwam plik blokady." | tee -a "${LOGNAME}"
        ${cmd_unlocking}
        exit 1
    fi
    # 3. Znajdz slot tasmy $tape_to_write
    local slot_to_write=$(nsrjb -j "${library}" -C | grep "${tape_to_write}" | awk '{print $1}' |  cut -c 1)
    # 4.  SprawdÅº status asmy $tape_to_write
    local tape_status=$(nsrjb -j "${library}" -C | grep "${tape_to_write}" | awk '{print $2}' |  cut -c 7-9)
    # 5. Zmiana statusu wszystkich tasm w puli na "read only"
    echo "Zmiana statusu wszystkich tasm w ${POOL} na \"read only\"" | tee -a "$LOGNAME"
     for tape in ${tape_list}; do
        nsrmm -o readonly -y  -v "${tape}"
        # Sprawdzenie kodu wyjscia
        if [[ $? -ne 0 ]]; then
          echo "Blad: Nie udalo sie zmienic statusu tasmy ${tape} na 'readonly'." | tee -a "$LOGNAME"
          exit 1
        else
        echo "Zmieniono status tasmy ${tape} na 'read only'." | tee -a "$LOGNAME"
        fi
    done

    sleep 10
    echo "" | tee -a "${LOGNAME}"
    # 6. Zmiana statusu tasmy o najnizszym numerze na "Appendable"
    echo "${TDd} W puli $POOL znalazlem tasme o najnizszym numerze: $tape_to_write" | tee -a "${LOGNAME}"
    echo "${TDd} Zmieniam status tasmy ${tape_to_write} na \"Appendable\"." | tee -a "${LOGNAME}"
    sleep 10
    nsrmm -o notreadonly -y -v "$tape_to_write"
    # 7. Sprawdzenie powodzenia operacji zmiany statusu
    if [[ "$tape_status" != "r" ]]; then
    echo "${TDd} Tasma ${tape_to_write} gotowa do zapisu (status: appendable)." | tee -a "${LOGNAME}"
    else
    echo "${TDd} Zmiana statusu tasmy ${tape_to_write} nie powiodla sie." | tee -a "${LOGNAME}"
    retry_check "prep_tape_1"    
    fi
    echo "" | tee -a "${LOGNAME}"
}

# Funkcja do przygotowania kolejnej tasmy do zapisu
prepare_next_tape_for_writing() {
    local library=$1
    local pool=$2
    local drive=$3

    # Poczekaj 300 sekund
    sleep 300

    # Sprawdz, czy w napedzie jest tasma
    local tape_in_drive=$(nsrjb -j "$library" -C | grep "$drive" | awk '{print $2}')
    if [[ -n "$tape_in_drive" ]]; then
        # StwÃ³rz lise tasm w bibliotece i puli (za wyjatkiem tej w napedzie)
        local tape_list=$(nsrjb -L -j "$library" -P "$pool" | awk '{print $1}' | grep -E '^[0-9]+$' | grep -v "$tape_in_drive")

        # ZnajdÅº tsme o najniÅ¼szym numerz
        local tape_to_write=$(echo "$tape_list" | sort -n | head -n 1)

        # SprawdÅº status tsmy $tape_to_write i zmien na "appendable" jesli jest inny
        local tape_status=$(mminfo -q "volume=$tape_to_write" -r "volume,volflags" | awk '{print $2}')
        if [[ "$tape_status" != "r" ]]; then
            nsrmm -o notreadonly -v -m "$tape_to_write"
        fi

        echo "$tape_to_write" | tee -a "${LOGNAME}"
    else
        echo "Brak tasmy w napedzie. Nie moÅ¼na przygotowc kolejnej tasmy."| tee -a "${LOGNAME}"
        exit 1
    fi
}

#Funkcja wyboru retencji
choice_retent() {
    echo "" | tee -a "${LOGNAME}"
    echo "Ustawic retencje na $RTT?" | tee -a "${LOGNAME}"
    
    echo "${TDd} Wybierz retencje klonow na tasmie. Wpisz date w formacie mm/dd/yy. Domyslnie dodam godzine 23:59:59" | tee -a "${LOGNAME}"
    read -r RETENT1

    RETENT2="$RETENT1 23:59:59"

    ## Sprawdzanie poprawnosci formatu daty
    validate_date "$RETENT1"
}

# Funkcja sprawdzajaca poprawnosc daty w formacie mm/dd/yy
validate_date() {
    local date_str="$1"

    # Sprawdzenie, czy data jest w formacie mm/dd/yy
    if [[ ! $date_str =~ ^([0-1][0-9])/([0-3][0-9])/([0-9]{2})$ ]]; then
        echo "Zla data"
        retry_check "check_retent"
        return
    fi

    local month="${BASH_REMATCH[1]}"
    local day="${BASH_REMATCH[2]}"
    local year="${BASH_REMATCH[3]}"

    # Sprawdzenie poprawnosci miesiaca
    if (( month < 1 || month > 12 )); then
               echo "Zla data" | tee -a "${LOGNAME}"
        retry_check "check_retent"
        return
    fi

    # Sprawdzenie poprawnosci dnia
    if (( day < 1 || day > 31 )); then
        echo "Zla data" | tee -a "${LOGNAME}"
        retry_check "check_retent"
        return
    fi

    # Sprawdzenie dni w miesiacach
    if (( month == 4 || month == 6 || month == 9 || month == 11 )) && (( day > 30 )); then
        echo "Zla data" | tee -a "${LOGNAME}"
        retry_check "check_retent"
        return
    fi

    # Sprawdzenie lutego (uwzgledniajac lata przestepne)
    if (( month == 2 )); then
        if (( day > 29 )); then
            echo "Zla data" | tee -a "${LOGNAME}"
            retry_check "check_retent"
            return
        elif (( day == 29 )); then
            if (( (year % 4 != 0) || (year % 100 == 0 && year % 400 != 0) )); then
                echo "Zla data" | tee -a "${LOGNAME}"
                retry_check "check_retent"
                return
            fi
        fi
    fi

    echo "${TDd} Wybrales retencje: $date_str. Format daty jest poprawny" | tee -a "${LOGNAME}"
}
